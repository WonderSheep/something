
//浏览器渲染过程如下：
//1.解析html,生成dom树，解析css，生成cssom树，将dom树和cssom树
//2.将dom树和cssom树结合，生成渲染树
//3.layout(回流):根据生成的渲染树，进行回流，得到节点的几何位置(位置，大小)
//4.Painting(重绘):根据渲染树记忆回流得到的几何信息，得到节点的绝对像素
//5.Display:将像素发送给GPU，展示在页面上。

//回流:计算元素在设备视口(viewport)内的确切位置和大小，这个计算的阶段就是回流

//重绘:将渲染树的每个节点都转换为屏幕上的实际像素，这个阶段就在重绘节点

//何时发生
//页面一开始渲染的时候
//添加或删除可见的dom元素
//元素的位置发生变化
//元素的尺寸发生变化(包括外边距、内边距、边框大小、高度和宽度等)
//内容发生变化，如文本变化或图片被另一个不同尺寸的图片所替代
//浏览器的视口发生变化

//回流一定发生重绘，但是重绘不一顶会回流

//如何减少回流和重绘

//最小化回流和重绘：比如样式集中改变，使用添加新类名样式.class或cssText
//批量操作dom，比如读取某元素offsetWidth属性存到一个临时变量，再去使用，而不是频繁使用这个计算属性；又比如利用document.createDocumentFragment()来添加要被添加的节点，处理完之后再插入到实际dom中
//使用position:absolute和position:fixed来使元素脱离文档流
//开启GPU加速，利用css属性transform、will-change，比如改变元素位置我们使用
//translate会比使用绝对定位改变其left、top等来的高效，因为它不会触发回流和重回
//transform使浏览器为元素创建一个gpu图层，是的动画元素在一个独立的层中进行渲染。
//当元素的内容没有发生改变时，就没必要进行重绘